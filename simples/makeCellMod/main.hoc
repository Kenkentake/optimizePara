{load_file("nrngui.hoc")}
{load_file("cell.hoc")}
{if(!name_declared("gnabar_tmp")){ gnabar_tmp=0.12}}
{if(!name_declared("gkdrbar_tmp")){ gkdrbar_tmp=0.005}}
{if(!name_declared("gl_tmp")){ gl_tmp=0.0003}}
{if(!name_declared("gcatbar_tmp")){ gcatbar_tmp=0.0001}}
{if(!name_declared("gkcabar_tmp")){ gkcabar_tmp=0.002}}
{if(!name_declared("ena_tmp")){ ena_tmp=55}}
{if(!name_declared("ek_tmp")){ ek_tmp=-70}}
{if(!name_declared("el_tmp")){ el_tmp=-50}}
{if(!name_declared("eca_tmp")){ eca_tmp=124}}
{if(!name_declared("stim_amp")){ stim_amp=100}}
{if(!name_declared("cell_size_rate")){ cell_size_rate=1 }}
{if(!name_declared("gA_tmp")){ gA_tmp=0.022 }}
{if(!name_declared("a_sk_tmp")){ a_sk_tmp=0.08 }}
{if(!name_declared("offset_tmp")){ offset_tmp=0}}
{if(!name_declared("coef_log_tmp")){ coef_log_tmp=0.5}}
{if(!name_declared("tau_sk_tmp")){ tau_sk_tmp=250}}
{if(!name_declared("coef_scale_C_tmp")){ coef_scale_C_tmp=0.00005}}
{if(!name_declared("coef_intercept_tmp")){ coef_intercept_tmp=1.120}}
{if(!name_declared("power_q_tmp")){ power_q_tmp=2}}
{if(!name_declared("qinf_scale_tmp")){ qinf_scale_tmp=1.15}}
objref cell
objref stim
objref nclist, nc, nc2
objref tvec, idvec, nil

//printf("%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\n", gnabar_tmp, gkdrbar_tmp, gl_tmp, gcatbar_tmp, gkcabar_tmp, ena_tmp, ek_tmp, el_tmp, eca_tmp, stim_amp, cell_size_rate)

cell = new lal_vpc_single(0, 0, 0, gnabar_tmp, gkdrbar_tmp, gl_tmp, gcatbar_tmp, gkcabar_tmp, ena_tmp, ek_tmp, el_tmp, eca_tmp, cell_size_rate, gA_tmp, a_sk_tmp, offset_tmp, coef_log_tmp, tau_sk_tmp, coef_scale_C_tmp, coef_intercept_tmp, power_q_tmp, qinf_scale_tmp)

bin = 250

stim = new IClamp(0.5)
stim.dur = bin * 7
stim.amp = stim_amp
stim.del = 100

nclist = new List()
nc = new NetCon(stim, cell.synlist.o(0), 0, 0.1, 0.01)
{nclist.append(nc)}
//printf("threshold = %g\n", nclist.o(0).threshold)

tvec = new Vector()
idvec = new Vector()
{nc2 = cell.connect2target(nil)}
{nc2.record(tvec, idvec, nc.srcgid)}

dt = 0.025
tstop = 2000
{load_file("graph.ses")}
{run()}

min = 1000
min1 = 1000
min2 = 1000
min3 = 1000
min4 = 1000
min5 = 1000
min6 = 1000
min7 = 1000
c1 = 0
c2 = 0
c3 = 0
c4 = 0
c5 = 0
c6 = 0
c7 = 0
ave1 = 0
ave2 = 0
ave3 = 0
ave4 = 0
ave5 = 0
ave6 = 0
ave7 = 0
for i=0, tvec.size()-2 {
    isi = tvec.x(i+1) - tvec.x(i)
    if(min > isi){
	min = isi
    }
    if(tvec.x(i) > 100){
	if(tvec.x(i) < 350){
	    if(min1 > isi){
		min1 = min
	    }
	    ave1 = ave1 + isi
	    c1 = c1 + 1
	}else if(tvec.x(i) < 600){
	    if(min2 > isi){
		min2 = isi
	    }
	    ave2 = ave2 + isi
	    c2 = c2 + 1
	}else if(tvec.x(i) < 850){
	    if(min3 > isi){
		min3 = isi
	    }
	    ave3 = ave3 + isi
	    c3 = c3 + 1
	}else if(tvec.x(i) < 1100){
	    if(min4 > isi){
		min4 = isi
	    }
	    ave4 = ave4 + isi
	    c4 = c4 + 1
	}else if(tvec.x(i) < 1350){
	    if(min5 > isi){
		min5 = isi
	    }
	    ave5 = ave5 + isi
	    c5 = c5 + 1
	}else if(tvec.x(i) < 1600){
	    if(min6 > isi){
		min6 = isi
	    }
	    ave6 = ave6 + isi
	    c6 = c6 + 1
	}else{
	    if(min7 > isi){
		min7 = isi
	    }
	    ave7 = ave7 + isi
	    c7 = c7 + 1
	}
    }
}

c7 = c7 + 1
max_freqs = 1000.0 / min
printf("##max frequency is %g##\n", max_freqs)

freq1 = 1000.0 / min1
freq2 = 1000.0 / min2
freq3 = 1000.0 / min3
freq4 = 1000.0 / min4
freq5 = 1000.0 / min5
freq6 = 1000.0 / min6
freq7 = 1000.0 / min7
printf("change of freqs\n %f %f %f %f %f\n", freq1, freq2, freq3, freq4, freq5, freq6, freq7)

if(c1!=0){
    ave1 = 1000.0/(ave1/c1)
}
if(c2!=0){
    ave2 = 1000.0/(ave2/c2)
}
if(c3!=0){
    ave3 = 1000.0/(ave3/c3)
}
if(c4!=0){
    ave4 = 1000.0/(ave4/c4)
}
if(c5!=0){
    ave5 = 1000.0/(ave5/c5)
}
if(c6!=0){
    ave6 = 1000.0/(ave6/c6)
}
if(c7!=0){
    ave7 = 1000.0/(ave7/c7)
}

printf("average of each section(ISI version)\n %f %f %f %f %f %f %f\n", ave1, ave2, ave3, ave4, ave5, ave6, ave7)

ave1 = 1000/bin * c1
ave2 = 1000/bin * c2
ave3 = 1000/bin * c3
ave4 = 1000/bin * c4
ave5 = 1000/bin * c5
ave6 = 1000/bin * c6
ave7 = 1000/bin * c7
printf("average of each section(count spike version)\n %f %f %f %f %f %f %f\n", ave1, ave2, ave3, ave4, ave5, ave6, ave7)