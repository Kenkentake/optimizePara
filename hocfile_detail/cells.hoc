load_file("nrngui.hoc")

begintemplate lalvpc_single

public soma, axon, dend, dend_parent, makeSyn, synlist, connect2target
create soma, axon, dend[1], dend_parent
objref esyn
objref synlist

proc init(){local x, y, z, mode, i
    x = $1
    y = $2
    z = $3
    //excitatory cell or inhibitory cell
    mode = $4
    branchNum = $5
    
    create soma, axon, dend_parent, dend[branchNum]
    for i=0, branchNum -1 {
	connect dend[i](1), dend_parent(0)
    }
    connect soma(0), dend_parent(1)
    connect axon(0), soma(1)
    
    if(mode < 0){
	mode = 1
    }
    
    soma {
	L = 100
	diam = 300 * ( 1 + 0.8 * mode)
	nseg = 10
	Ra = 100
	cm = 1
	
	pt3dclear()
	pt3dadd(30+x, y, z, diam)
	pt3dadd(x, y, z, diam)
	
	insert GPeA
	
	gnabar_GPeA = 0.12//0.19
	gkdrbar_GPeA = 0.0175//0.06
	gl_GPeA = 0.0003//0.0001
	gcatbar_GPeA = 0.0003//0.005
	gkcabar_GPeA = 0.01//0.004
	ena_GPeA = 55
	ek_GPeA = -70		
	el_GPeA = -50//-54.3
	eca_GPeA = 124
	gA_GPeA = 0.022
	a_sk_GPeA = 11e-2
	offset_GPeA = 0.0
	coef_log_GPeA = 3
	tau_sk_GPeA = 1200
	coef_scale_C_GPeA = 0.75
	coef_intercept_GPeA = 1.120
	power_q_GPeA = 1.5
	qinf_scale_GPeA = 1.15
	// gnabar_GPeA = 0.12//0.12//0.19
	
	// 	gkdrbar_GPeA = 0.005//0.06
	// 	gl_GPeA = 0.0003//0.0001
	// 	gcatbar_GPeA = 0.0001//0.005
	// 	gkcabar_GPeA = 0.002//0.004
	// 	ena_GPeA = 55
	// 	ek_GPeA = -70		
	// 	el_GPeA = -50//-54.3
	// 	eca_GPeA = 124
    }
    
    axon {
	L = 500
	diam = 0.2
	nseg = 10//20
	
	pt3dclear()
        pt3dadd(x,y,z,diam)
        pt3dadd(-500+x,y,z,diam)

	insert hh
    }
    
    dend_parent {
        L = 50
        diam = 15//9.2//15
        nseg = 10
        
        pt3dclear()
        pt3dadd(80+x,y,z,diam)
        pt3dadd(30+x,y,z,diam)

        insert pas
        g_pas = 0.0000666//0.0001666
        e_pas = -60.0
    }
    for i=0, branchNum-1 dend[i] {
        L = 400
        diam = 3.23//2//2.03
        nseg = 10//82

        pt3dclear()
        pt3dadd(-346.4+x,200*cos(i*2*3.1415/branchNum)+y,200*sin(i*2*3.1415/branchNum)+z,diam)
        pt3dadd(80,0,0,diam)

        insert pas
        g_pas = 0.0000666//0.0001666
        e_pas = -60.0
    }

    synlist = new List()
    soma {
	esyn = new Exp2Syn(0.5)
	synlist.append(esyn)//for stimulating by IClamp or Netstim
    }
}

obfunc connect2target(){localobj nc
    soma nc = new NetCon(&v(0.5), $o1)
    nc.threshold = 10
    if(numarg()==2){ $o2 = nc }
    return nc
}

objref syn_

obfunc makeSyn(){local reversal_v, which_dend, where_dend
    
    reversal_v = $1
    which_dend = $2
    where_dend = $3

    dend[which_dend] {
	syn_ = new Exp2Syn(where_dend)
	synlist.append(syn_)
	syn_.e = reversal_v
    }
    return syn_
}

endtemplate lalvpc_single

objref cells
objref recordSpike

proc makeCells(){local i, num_cell localobj cell, nc, nil
    num_cell = $1
    cells = new List()
    
    for(i=pc.id; i<num_cell; i=i+pc.nhost){
	cell = new lalvpc_single(160*int(i/10), 20*(i%10),0, syn_reversal.x[0][i], 10) //for test of multi_compartment
	cells.append(cell)
	pc.set_gid2node(i,pc.id)
	nc = cell.connect2target(nil)
	nc.weight = 1
	pc.cell(i, nc)
    }
}